#!bash
#
# Usage: clicraft backup
#
#    Backs up world data.
#

# Usage: clicraft restore [file.zip] [files]
#
#    Restores world data.
#

WORLD="$(serverprop 'level-name')"
BACKUP_DIR="${BACKUP_DIR-"$SERVER_DIR/backups"}"
BACKUP_FILE="${BACKUP_FILE-"$BACKUP_DIR/$WORLD-$(date +%Y%m%d-%H%M%S).zip"}"
BACKUP_TARGETS="${BACKUP_TARGETS-"$WORLD $WORLD_*"}"
BACKUP_COMMAND="${BACKUP_COMMAND-"zip -r $BACKUP_FILE $BACKUP_TARGETS"}"
BACKUP_LIMIT="${BACKUP_LIMIT-7}"

# lists backups in order from oldest to newest
list_backups() {
	find "$BACKUP_DIR" -maxdepth 1 -type f | sort
}

# returns 0 if we think we have enough space for a new backup
#
# we guess the size of a new backup will be less than the size of the last
# backup + 50MB
enough_space() {
	local DF DU
	DF=$(stat -f -c "%a*%S" "$BACKUP_DIR")
	DU=$(stat -c '%b*%B' "$1")
	(( DF >= DU + 50*1024*1024 ))
}

prune_backups() {
	if [[ "$BACKUP_LIMIT" != 0 ]]; then
		list_backups | head -n -"$1" | xargs rm -v 2>/dev/null
	fi
}

backup() {
	if ! mklock save; then
		warn "Could not lock the save state! Backup may be corrupt"
	fi

	if status; then
		pushtrap "cmd save-on"
		cmd save-off
		cmd save-all
	fi

	mkdir -p "$BACKUP_DIR"

	# if we don't have enough space to store a copy of the last backup + 50MB,
	# prune old backups before taking the new backup
	local lastbackup="$(list_backups | tail -1)"
	if [[ -f "$lastbackup" ]] && enough_space "$lastbackup"; then
		$BACKUP_COMMAND
		prune_backups "$BACKUP_LIMIT"
	else
		prune_backups $((BACKUP_LIMIT - 1))
		$BACKUP_COMMAND
	fi
	pwd
	echo $BACKUP_COMMAND

	if status; then
		cmd save-on
		poptrap "cmd save-on"
	fi

	rmlock save
}

restore() {
	local dir FILE

	if [[ "$1" = "" ]]; then
		list_backups | grep -o '[^/]*$'
	else
		FILE="$1"
		shift

		if action status >&2 2>/dev/null; then
			return 1
		fi

		# prompts for file collisions
		unzip "$BACKUP_DIR/$FILE" "$@"
	fi
}

case "$ACTION" in
  backup) backup ;;
  restore) restore "$@" ;;
esac

